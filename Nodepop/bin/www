#!/usr/bin/env node

/**
 * Module dependencies.
 */
//Para trabajar con variables de entorno que son utilizadas para autenticar (ver fichero .dev)
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('Nodepop:server');
var http = require('http');
var cluster = require('cluster');
var os = require('os');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
//Código control de cluster
//Si soy el proceso principal (inicial)
if (cluster.isMaster) {
    //cluster.on('listening', (worker, address) => {
    //console.log(`Worker ${worker.id} con PID ${worker.process.pid} conectado a puerto ${address.port}`);
    //});
    //Ver cores del procesador
    //CREAR CLUSTER POR CORE
    const numCPU = os.cpus().length;
    for (let i = 0; i < numCPU; i++) {
        cluster.fork();
    }
    console.log(`Procesador con ${numCPU} CPU's`)
    cluster.on('exit', (worker, code, signal) => {
        console.log(`Worker ${worker.process.pid} KILL con código ${code} and señal ${signal}`);
        console.log('Arrancado nuevo worker');
        cluster.fork();
    });
} else { //Solo arranco por aquí , si NO soy el master, si soy un fork


    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    //Si arrancamos con 'npm run dev'  (dev es la variable de entorno) ejecutará la siguiente línea además de la subsiguiente.
    //Si lo hacemos con nodemon por ejemplo, aparecerá solo la subsiguiente
    debug('MODO DEV=>Listening on ' + bind);
    console.log('Listening on ' + bind);
}